name: rocksdbjni
on: [push, pull_request]
jobs:
  # ======================== Linux ======================= #
  
  build-linux-amd64:
    #if: false
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: "./.github/actions/pre-steps"
    - uses: actions/setup-java@v4
      with:
         distribution: 'temurin'
         java-version: '11'
    - name: Set Java Environment
      run: |-
        echo "JAVA_HOME=${JAVA_HOME}"
        which java && java -version
        which javac && javac -version
    - name: Build RocksDBJava Static Library
      run: make V=1 J=4 -j4 rocksdbjavastatic
    - name: Build RocksDBJava Static Library MUSL version
      run: make V=1 J=4 -j4 rocksdbjavastaticdockerx86_64musl
    - uses: actions/upload-artifact@v4
      with:
         name: linux-amd64
         path: java/target/**
         retention-days: 1
  start-aws-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-05852c80a11603d19
          ec2-instance-type: c6g.2xlarge
          subnet-id: ${{ secrets.AWS_SUBNET_ID }}
          security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
          pre-runner-script: |
                 sudo yum update -y && \ 
                 sudo yum install docker git libicu make cmake g++ -y
                 sudo systemctl enable docker
  build-linux-arm64:
    name: Build RocksDBJava Static Library
    needs: start-aws-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-aws-runner.outputs.label }} # run the job on the newly created runner
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/pre-steps"
      - uses: actions/setup-java@v4
        with:
           distribution: 'temurin'
           java-version: '11'
      - name: Set Java Environment
        run: |-
          echo "JAVA_HOME=${JAVA_HOME}"
          which java && java -version
          which javac && javac -version
      - name: Build RocksDBJava Static Library
        run: make V=1 J=8 -j8 rocksdbjavastatic
      #- name: Build RocksDBJava Static Library MUSL version
      #  run: make V=1 J=4 -j4 rocksdbjavastaticdockerx86_64musl
      - uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: java/target/**
          retention-days: 1
  stop-aws-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-aws-runner # required to get output from the start-aws-runner job
      - build-linux-arm64 # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-aws-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-aws-runner.outputs.ec2-instance-id }}
          
  
  # ======================== Windows ======================= #
  build-windows-amd64:
   # if: false
    runs-on: windows-2019
    env:
      CMAKE_GENERATOR: Visual Studio 16 2019
      CMAKE_PORTABLE: 1
    steps:
    - uses: actions/checkout@v4
    - uses: "./.github/actions/windows-build-steps"
    - name: libraries
      uses: actions/upload-artifact@v4
      with:
         name: windows-amd64
         path: "D:/a/rocksdb/rocksdb/build/java/Release/librocksdbjni-win64.dll"
         #path: "D:/a/rocksdb/rocksdb/build/"
         retention-days: 1
  
  # ======================== OS X ======================= #
  
  build-macosx:
    #if: false
    runs-on: macos-13
    env:
      JAVA_HOME: "/Library/Java/JavaVirtualMachines/liberica-jdk-8.jdk/Contents/Home"
    steps:
    - uses: actions/checkout@v4
    - uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: 14.3.1
    - uses: "./.github/actions/increase-max-open-files-on-macos"
    - uses: "./.github/actions/install-gflags-on-macos"
    - uses: "./.github/actions/install-jdk8-on-macos"
    - uses: "./.github/actions/pre-steps-macos"
    - name: Set Java Environment
      run: |-
        echo "JAVA_HOME=${JAVA_HOME}"
        which java && java -version
        which javac && javac -version
    - name: Build RocksDBJava x86 and ARM Static Libraries
      run: make V=1 J=4 -j4 rocksdbjavastaticosx
    - uses: actions/upload-artifact@v4
      with:
         name: macosx
         path: java/target/librocksdbjn*.jnilib
         retention-days: 1

  # ======================== Final JAR assembly ======================= #
  package:
    runs-on: ubuntu-latest
    needs: [build-linux-amd64, build-linux-arm64, build-macosx, build-windows-amd64]
    steps:
    - uses: actions/checkout@v4
    - name: Download Linux AMD64 artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-amd64
        path: build
    - name: Download Linux ARM64 artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-arm64
        path: build
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: macosx
        path: build
    - name: Download Windows AMD64 artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-amd64
        path: build
    #- name: Create JAR with native libraries
    #  run: |
    #      tar
    - name: Upload combined JAR artifact
      uses: actions/upload-artifact@v4
      with:
         name: "rocksdbjni-jar"
         path: build
    
